<?php
 namespace blobfolio\wp\looksee\vendor\common\ref; use \blobfolio\wp\looksee\vendor\common\constants; class file { public static function idn_to_ascii(&$url) { if (!function_exists('idn_to_ascii')) { return false; } if (is_array($url)) { foreach ($url as $k=>$v) { static::idn_to_ascii($url[$k]); } } else { if (defined('INTL_IDNA_VARIANT_UTS46')) { $url = idn_to_ascii($url, 0, INTL_IDNA_VARIANT_UTS46); } else { $url = idn_to_ascii($url); } } return true; } public static function idn_to_utf8(&$url) { if (!function_exists('idn_to_utf8')) { return false; } if (is_array($url)) { foreach ($url as $k=>$v) { static::idn_to_utf8($url[$k]); } } else { if (defined('INTL_IDNA_VARIANT_UTS46')) { $url = idn_to_utf8($url, 0, INTL_IDNA_VARIANT_UTS46); } else { $url = idn_to_utf8($url); } } return true; } public static function leadingslash(&$path='') { if (is_array($path)) { foreach ($path as $k=>$v) { static::leadingslash($path[$k]); } } else { cast::to_string($path); $lock = constants::$str_lock; constants::$str_lock = true; static::unleadingslash($path); $path = "/$path"; constants::$str_lock = $lock; } return true; } public static function path(&$path='', $validate=true) { if (is_array($path)) { foreach ($path as $k=>$v) { static::path($path[$k], $validate); } } else { cast::to_string($path); $lock = constants::$str_lock; constants::$str_lock = true; if (preg_match('/^(https?|ftps?|sftp)/iu', $path)) { sanitize::url($path); constants::$str_lock = $lock; return true; } if ('file://' === substr($path, 0, '7')) { $path = substr($path, 7); } static::unixslash($path); cast::to_bool($validate, true); $original = $path; try { $path = realpath($path); } catch (\Throwable $e) { $path = false; } catch (\Exception $e) { $path = false; } if ($validate && false === $path) { $path = false; constants::$str_lock = $lock; return false; } elseif (false === $path) { try { $path = $original; if (false !== $dir = realpath(dirname($path))) { static::trailingslash($dir); $path = $dir . basename($path); } else { $path = $original; } } catch (\Throwable $e) { $path = $original; } catch (\Exception $e) { $path = $original; } } $original = $path; try { if (is_dir($path)) { static::trailingslash($path); } } catch (\Throwable $e) { $path = $original; } catch (\Exception $e) { $path = $original; } constants::$str_lock = $lock; } return true; } public static function trailingslash(&$path='') { if (is_array($path)) { foreach ($path as $k=>$v) { static::trailingslash($path[$k]); } } else { cast::to_string($path); $lock = constants::$str_lock; constants::$str_lock = true; static::untrailingslash($path); $path .= '/'; constants::$str_lock = $lock; } return true; } public static function unixslash(&$path='') { if (is_array($path)) { foreach ($path as $k=>$v) { static::unixslash($path[$k]); } } else { cast::to_string($path); $path = str_replace('\\', '/', $path); $path = str_replace('/./', '//', $path); $path = preg_replace('/\/{2,}/u', '/', $path); } return true; } public static function unleadingslash(&$path='') { if (is_array($path)) { foreach ($path as $k=>$v) { static::unleadingslash($path[$k]); } } else { cast::to_string($path); $lock = constants::$str_lock; constants::$str_lock = true; static::unixslash($path); $path = ltrim($path, '/'); constants::$str_lock = $lock; } return true; } public static function untrailingslash(&$path='') { if (is_array($path)) { foreach ($path as $k=>$v) { static::untrailingslash($path[$k]); } } else { cast::to_string($path); $lock = constants::$str_lock; constants::$str_lock = true; static::unixslash($path); $path = rtrim($path, '/'); constants::$str_lock = $lock; } return true; } } 