<?php
 namespace blobfolio\wp\looksee\vendor\common; class file { public static function copy($from, $to) { ref\file::path($from, true); if (!$from) { return false; } ref\file::path($to, false); if (!$to || ($from === $to)) { return false; } if (is_dir($from)) { ref\file::trailingslash($from); ref\file::trailingslash($to); if (!is_dir($to)) { $dir_chmod = (fileperms($from) & 0777 | 0755); if (!static::mkdir($to, $dir_chmod)) { return false; } } if ($handle = opendir($from)) { while (false !== ($file = readdir($handle))) { if (('.' === $file) || ('..' === $file)) { continue; } static::copy("{$from}{$file}", "{$to}{$file}"); } closedir($handle); } return true; } elseif (is_file($from)) { $dir_from = dirname($from); $dir_to = dirname($to); if (!is_dir($dir_to)) { $dir_chmod = (fileperms($dir_from) & 0777 | 0755); if (!static::mkdir($dir_to, $dir_chmod)) { return false; } } if (!@copy($from, $to)) { return false; } $file_chmod = (fileperms($from) & 0777 | 0644); @chmod($to, $file_chmod); return true; } return false; } public static function data_uri($path='') { ref\cast::to_string($path, true); $lock = constants::$str_lock; constants::$str_lock = true; ref\file::path($path, true); constants::$str_lock = $lock; try { if (false !== $path && is_file($path)) { $content = base64_encode(@file_get_contents($path)); $finfo = mime::finfo($path); return 'data:' . $finfo['mime'] . ';base64,' . $content; } } catch (\Throwable $e) { return false; } catch (\Exception $e) { return false; } return false; } public static function empty_dir($path='') { try { ref\cast::to_string($path); if (!is_readable($path) || !is_dir($path)) { return false; } if ($handle = opendir($path)) { while (false !== ($entry = readdir($handle))) { if (('.' !== $entry) && ('..' !== $entry)) { return false; } } closedir($handle); } } catch (\Throwable $e) { return false; } catch (\Exception $e) { return false; } return true; } public static function hash_dir($path, $dir_algo='md5', $file_algo=null) { if (!$dir_algo || !in_array($dir_algo, hash_algos(), true)) { return false; } if (!$file_algo || !in_array($file_algo, hash_algos(), true)) { $file_algo = $dir_algo; } $files = static::scandir($path, true, false); if (!count($files)) { return hash($dir_algo, 'empty'); } $soup = ''; foreach ($files as $v) { $soup .= hash_file($file_algo, $v); } return hash($dir_algo, $soup); } public static function idn_to_ascii($url) { ref\file::idn_to_ascii($url); return $url; } public static function idn_to_utf8($url) { ref\file::idn_to_utf8($url); return $url; } public static function leadingslash($path='') { ref\file::leadingslash($path); return $path; } public static function mkdir($path='', $chmod=null) { if (!$chmod || !is_numeric($chmod)) { $chmod = (fileperms(dirname(__FILE__)) & 0777 | 0755); } ref\file::path($path, false); if (!$path || (false !== strpos($path, '://'))) { return false; } if (!is_dir($path)) { ref\file::untrailingslash($path); $base = dirname($path); while ($base && ('.' !== $base) && !is_dir($base)) { $base = dirname($base); } if (!@mkdir($path, 0777, true)) { return false; } if ($path !== $base) { if (!$base || ('.' === $base)) { $base = dirname(__FILE__); } if (0 !== mb::strpos($path, $base)) { return true; } $path = mb::substr($path, mb::strlen($base)); ref\file::unleadingslash($path); $parts = explode('/', $path); $path = $base; foreach ($parts as $v) { $path .= ('/' === substr($path, -1)) ? $v : "/$v"; if (!@chmod($path, $chmod)) { return true; } } } else { @chmod($path, $chmod); } } return true; } public static function path($path='', $validate=true) { ref\file::path($path, $validate); return $path; } public static function readfile_chunked($file, $retbytes=true) { ref\cast::to_string($file, true); ref\cast::to_bool($retbytes, true); $buffer = ''; $cnt = 0; $chunk_size = 1024 * 1024; if (false === ($handle = fopen($file, 'rb'))) { return false; } while (!feof($handle)) { $buffer = fread($handle, $chunk_size); echo $buffer; ob_flush(); flush(); if ($retbytes) { $cnt += strlen($buffer); } } $status = fclose($handle); if ($retbytes && $status) { return $cnt; } return $status; } public static function redirect(string $to) { ref\sanitize::url($to); unset($_POST); unset($_GET); unset($_REQUEST); if (!headers_sent()) { header("Location: $to"); } else { echo "<script>top.location.href='" . str_replace("'", "\'", $to) . "';</script>"; } exit; } public static function rmdir($path='') { try { ref\file::path($path, true); if (!@is_readable($path) || !@is_dir($path)) { return false; } if ($handle = opendir($path)) { while (false !== ($entry = readdir($handle))) { if (('.' === $entry) || ('..' === $entry)) { continue; } $file = "{$path}{$entry}"; if (@is_file($file)) { @unlink($file); } else { static::rmdir($file); } } closedir($handle); } } catch (\Throwable $e) { return false; } catch (\Exception $e) { return false; } if (static::empty_dir($path)) { @rmdir($path); } return !@file_exists($path); } public static function scandir($path, $show_files=true, $show_dirs=true) { ref\file::path($path, true); if (!$path || !@is_dir($path) || (!$show_files && !$show_dirs)) { return array(); } $out = array(); if ($handle = opendir($path)) { ref\file::trailingslash($path); while (false !== ($file = readdir($handle))) { if (('.' === $file) || ('..' === $file)) { continue; } if (@is_file("{$path}{$file}")) { if ($show_files) { $out[] = "{$path}{$file}"; } } elseif (@is_dir("{$path}{$file}")) { if ($show_dirs) { $out[] = "{$path}{$file}"; } $out = array_merge($out, static::scandir("{$path}{$file}", $show_files, $show_dirs)); } } closedir($handle); } sort($out); return $out; } public static function trailingslash($path='') { ref\file::trailingslash($path); return $path; } public static function unixslash($path='') { ref\file::unixslash($path); return $path; } public static function unleadingslash($path='') { ref\file::unleadingslash($path); return $path; } public static function unparse_url($parsed=null) { $url = ''; $parsed = data::parse_args($parsed, constants::URL_PARTS); $parsed = array_map('trim', $parsed); $parsed = array_filter($parsed, 'strlen'); if (!count($parsed)) { return false; } if (isset($parsed['scheme'])) { $url = "{$parsed['scheme']}:"; } if (isset($parsed['host'])) { if ($url) { $url .= '//'; } if (isset($parsed['user'])) { $url .= $parsed['user']; if (isset($parsed['pass'])) { $url .= ":{$parsed['pass']}"; } $url .= '@'; } $url .= (filter_var($parsed['host'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) ? "[{$parsed['host']}]" : $parsed['host']); if (isset($parsed['port'])) { $url .= ":{$parsed['port']}"; } if (isset($parsed['path']) && mb::substr($parsed['path'], 0, 1) !== '/') { $url .= '/'; } } if (isset($parsed['path'])) { $url .= $parsed['path']; } if (isset($parsed['query'])) { $url .= "?{$parsed['query']}"; } if (isset($parsed['fragment'])) { $url .= "#{$parsed['fragment']}"; } return $url ? $url : false; } public static function untrailingslash($path='') { ref\file::untrailingslash($path); return $path; } } 