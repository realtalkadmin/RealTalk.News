<?php
 namespace blobfolio\wp\looksee\vendor\common; class cast { public static function __callStatic($method, $args) { $class = get_called_class(); if (array_key_exists($method, constants::CAST_TYPES)) { if (!is_array($args)) { $args = array(); } return call_user_func_array(array($class, constants::CAST_TYPES[$method]), $args); } throw new \Exception(sprintf('The required method "%s" does not exist for %s', $method, $class)); } public static function to_array($value=null) { ref\cast::to_array($value); return $value; } public static function array_type(&$arr=null) { if (!is_array($arr) || !count($arr)) { return false; } $keys = array_keys($arr); if (range(0, count($keys) - 1) === $keys) { return 'sequential'; } elseif (count($keys) === count(array_filter($keys, 'is_numeric'))) { return 'indexed'; } else { return 'associative'; } } public static function to_bool($value=false, $flatten=false) { ref\cast::to_bool($value, $flatten); return $value; } public static function to_float($value=0, $flatten=false) { ref\cast::to_float($value, $flatten); return $value; } public static function to_int($value=0, $flatten=false) { ref\cast::to_int($value, $flatten); return $value; } public static function to_number($value=0, $flatten=false) { ref\cast::to_number($value, $flatten); return $value; } public static function to_string($value='', $flatten=false) { ref\cast::to_string($value, $flatten); return $value; } public static function to_type($value, $type=null, $flatten=false) { ref\cast::to_type($value, $type, $flatten); return $value; } } 