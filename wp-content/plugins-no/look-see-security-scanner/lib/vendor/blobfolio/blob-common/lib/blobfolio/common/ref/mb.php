<?php
 namespace blobfolio\wp\looksee\vendor\common\ref; use \blobfolio\wp\looksee\vendor\common\constants; use \blobfolio\wp\looksee\vendor\common\mb as v_mb; class mb { public static function str_pad(&$str='', $pad_length, $pad_string=' ', $pad_type=null) { cast::to_string($string, true); cast::to_int($pad_length, true); cast::to_string($pad_string, true); $lock = constants::$str_lock; constants::$str_lock = true; $current_length = v_mb::strlen($str); $pad_string_length = v_mb::strlen($pad_string); if ($pad_length <= $current_length || !$pad_string_length) { constants::$str_lock = $lock; return true; } if (STR_PAD_LEFT === $pad_type) { $str = str_repeat($pad_string, ceil(($pad_length - $current_length) / $pad_string_length)) . $str; $new_length = v_mb::strlen($str); if ($new_length > $pad_length) { $str = v_mb::substr($str, $new_length - $pad_length); } } elseif (STR_PAD_BOTH === $pad_type) { $leftright = 'right'; while (v_mb::strlen($str) < $pad_length) { $leftright = 'left' === $leftright ? 'right' : 'left'; if ('left' === $leftright) { $str = "{$pad_string}{$str}"; } else { $str .= $pad_string; } } $new_length = v_mb::strlen($str); if ($new_length > $pad_length) { if ('left' === $leftright) { $str = v_mb::substr($str, $new_length - $pad_length); } else { $str = v_mb::substr($str, 0, $pad_length); } } } else { $str .= str_repeat($pad_string, ceil(($pad_length - $current_length) / $pad_string_length)); $new_length = v_mb::strlen($str); if ($new_length > $pad_length) { $str = v_mb::substr($str, 0, $pad_length); } } constants::$str_lock = $lock; return true; } public static function str_split(&$str, $split_length=1) { cast::to_int($split_length, true); if ($split_length < 1) { $str = false; return false; } cast::to_string($str, true); $lock = constants::$str_lock; constants::$str_lock = true; $str_length = v_mb::strlen($str); $out = array(); for ($i = 0; $i < $str_length; $i += $split_length) { $out[] = v_mb::substr($str, $i, $split_length); } $str = $out; constants::$str_lock = $lock; return true; } public static function strrev(&$str) { cast::to_string($str, true); if (!$str) { return false; } preg_match_all('/./us', $str, $arr); $str = implode('', array_reverse($arr[0])); return true; } public static function strtolower(&$str='', $strict=false) { if (is_array($str)) { foreach ($str as $k=>$v) { static::strtolower($str[$k], $strict); } } elseif (!$strict || is_string($str)) { cast::to_string($str); if ($str) { if ( function_exists('mb_strtolower') && ( !function_exists('mb_check_encoding') || !mb_check_encoding($str, 'ASCII') ) ) { $str = mb_strtolower($str, 'UTF-8'); $from = array_keys(constants::CASE_CHARS); $to = array_values(constants::CASE_CHARS); $str = str_replace($from, $to, $str); } else { $str = strtolower($str); } } } return true; } public static function strtoupper(&$str='', $strict=false) { if (is_array($str)) { foreach ($str as $k=>$v) { static::strtoupper($str[$k], $strict); } } elseif (!$strict || is_string($str)) { cast::to_string($str); if ($str) { if ( function_exists('mb_strtoupper') && ( !function_exists('mb_check_encoding') || !mb_check_encoding($str, 'ASCII') ) ) { $str = mb_strtoupper($str, 'UTF-8'); $to = array_keys(constants::CASE_CHARS); $from = array_values(constants::CASE_CHARS); $str = str_replace($from, $to, $str); } else { $str = strtoupper($str); } } } return true; } public static function trim(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::trim($str[$k]); } } else { cast::to_string($str); $str = preg_replace('/^\s+/u', '', $str); $str = preg_replace('/\s+$/u', '', $str); } return true; } public static function ucfirst(&$str='', $strict=false) { if (is_array($str)) { foreach ($str as $k=>$v) { static::ucfirst($str[$k], $strict); } } elseif (!$strict || is_string($str)) { cast::to_string($str); if ($str) { if ( function_exists('mb_substr') && ( !function_exists('mb_check_encoding') || !mb_check_encoding($str, 'ASCII') ) ) { $lock = constants::$str_lock; constants::$str_lock = true; $first = v_mb::substr($str, 0, 1); static::strtoupper($first); $str = $first . v_mb::substr($str, 1, null); constants::$str_lock = $lock; } else { $str = ucfirst($str); } } } return true; } public static function ucwords(&$str='', $strict=false) { if (is_array($str)) { foreach ($str as $k=>$v) { static::ucwords($str[$k], $strict); } } elseif (!$strict || is_string($str)) { cast::to_string($str); if ($str) { $lock = constants::$str_lock; constants::$str_lock = true; $extra = array(); preg_match_all('/^(\p{L})/u', $str, $matches); if (count($matches[0])) { static::strtoupper($matches[1][0]); if ($matches[0][0] !== $matches[1][0]) { $extra[$matches[0][0]] = $matches[1][0]; } } preg_match_all('/(\s|\p{Pd}|\/)(.)/u', $str, $matches); if (count($matches[0])) { foreach ($matches[0] as $k=>$v) { static::strtoupper($matches[2][$k]); $new = $matches[1][$k] . $matches[2][$k]; if ($v !== $new) { $extra[$v] = $new; } } } if (count($extra)) { $extra = array_unique($extra); $str = str_replace(array_keys($extra), array_values($extra), $str); } constants::$str_lock = $lock; } } return true; } public static function wordwrap(&$str, $width=75, $break="\n", $cut=false) { cast::to_string($str, true); cast::to_int($width, true); cast::to_string($break, true); cast::to_bool($cut, true); if (!$str || $width <= 0) { return true; } if (!function_exists('mb_substr')) { $str = wordwrap($str, $width, $break, $cut); return true; } $lock = constants::$str_lock; constants::$str_lock = true; $chunks = preg_split('/([\s$]+)/uS', trim($str), -1, PREG_SPLIT_DELIM_CAPTURE); $lines = array(''); $line = 0; foreach ($chunks as $v) { if (preg_match('/\v/u', $v)) { $line++; $lines[$line] = $v; $line++; $lines[$line] = ''; continue; } if (preg_match('/\h/u', $v)) { $lines[$line] .= $v; continue; } $line_length = v_mb::strlen($lines[$line]); if ($line_length >= $width) { $line++; $lines[$line] = ''; $line_length = 0; } $word_length = v_mb::strlen($v); if ($word_length + $line_length <= $width) { $lines[$line] .= $v; continue; } if ($cut) { static::str_split($v, $width); $v = implode("\n", $v); } $v = preg_replace('/(\p{Pd})\n/u', '$1', $v); $v = preg_replace('/(\p{Pd}+)/u', "$1\n", $v); static::trim($v); $v = explode("\n", $v); foreach ($v as $v2) { $word_length = v_mb::strlen($v2); $line_length = v_mb::strlen($lines[$line]); if ($word_length + $line_length > $width) { $line++; $lines[$line] = ''; } $lines[$line] .= $v2; } } foreach ($lines as $k=>$v) { if (preg_match('/\v/u', $v)) { if ($v === $break) { unset($lines[$k]); } $lines[$k] = preg_replace('/^' . preg_quote($break, '/') . '/ui', '', $v); continue; } static::trim($lines[$k]); } $str = implode($break, $lines); static::trim($str); constants::$str_lock = $lock; return true; } } 